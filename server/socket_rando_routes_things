
        Connection middleware to set default room on connection
        var master_room_collection = {};
        var origin_room = testRoom;

        console.log(testRoom, 'connected');

        return clients in given room
        var testRoom = socket.handshake.testRoom;
        console.log(testRoom, 'connected');

        join this socket to the default chat room from the querystring
        socket.join(testRoom);

        var roomClients = io.of('').clients(testRoom);

        _.each(roomClients, function(client){
            console.log(client.handshake.testRoom, 'is in myroom');
        });

    CANVAS ROUTES ======================================================
        socket.emit('connected', {socket: socket});

        var k = '';

        socket.on('message', function(err, msg){
                // k = Object.keys(io.sockets.manager.roomClients[socket.id]);
                // if (k[1] !== undefined) {
                //     var chan = k[1].substring(1, k[1].length);
                //     socket.broadcast.to(chan).emit('message', err);
                // }
            });
        
        socket.on('pics', function(data, err){
            // if (sendgrid == undefined) {
            //     console.log("received email request but could not service");
            //     return;
            // }
            // console.log("pics rec'd");

            // imgs = data.msg.img_array;
            // email_addr = unescape(data.msg.email);

            // today = new Date();

            // var email = new sendgrid.Email();
            
            // email.addTo(email_addr);
            // email.setFrom("iOStream");
            // email.setSubject('[iOStream] Screenshots from ' + today.toDateString());

            // email.setText('Hi! Attached are your screenshots with annotations from ' + today.toLocaleString());
            // email.addHeader({'X-Sent-Using': 'SendGrid-API'});
            // email.addHeader({'X-Transport': 'web'});

            // for (ii = 0; ii < imgs.length; ii++)
            // {
            // var b64string = unescape(imgs[ii]);
            // b64string = b64string.substring(23);

            // var buf = new Buffer(b64string, 'base64');

            // email.addFile({content: buf, filename: 'ss'+ (ii + 1) +'.jpg'});
            // }


            // sendgrid.send(email, function(err, json) {  
            // if (err) { return console.error(err); }
            //   console.log(json);
            // });


        });

        socket.on('subscribe', function(data) { 
            // var hash = crypto.createHash('md5').update(data.room).digest('hex').substring(0, 8).toLowerCase();
            // console.log('joining room', hash);
            // k = Object.keys(io.sockets.manager.roomClients[socket.id]);
            // socket.join(hash); 
        });

        socket.on('channel', function(data) { 
            console.log('joining room', data.room.toLowerCase());
            socket.join(data.room); 
        });

    CONNECTION ROUTES ================================================
        Note to self: all sockets receive their default room from
        the URL /:test_id as $stateParams._id
        After they're logged
        The moderator can open _another_ room, 
        which becomes a pool of IDs available for connection
        {name: name, room: _id}
        
        On connection of a Watch socket, that room list
        is output to the newly connected user, who then
        selects their room from the list
        and joins that channel as well as the previous channel.

            socket.on('get_room_list', function(data){
                console.log('get room list', roomList);
                socket.emit('room_list', {rooms: roomList});
            });


    MESSAGING ROUTES =================================================

            socket.on('send:note', function(data){
                console.log('note sent', data);
                socket.to(origin_room).emit('note', data);
            });

            socket.on('send:subject_added', function(data){
                console.log('subject added socket', data.subject);
                
                // Join the subject test
                socket.join(data.subject._id);
                
                // store the subject test on an accessible variable
                testRoom = data.subject._id;

                // add the available rooms to the room list
                // TODO: Garbage collection: roomList will need to self-destruct on disconnection?
                // How will this clean up, since it lives on Server forever? HMM.
                roomList.push({subject: data.subject, room: data.subject._id}); 

                console.log('subject add roomlist', roomList);

                // Tell anyone in the origin room we have a new subject somewhere
                socket.to(origin_room).emit('room_list_update', {rooms: roomList});
            });

            socket.on('join_subject_test', function(data){
                console.log('join test touched', data);
                socket.join(data.subject);
                socket.to(origin_room).emit('add_subject', data);
            });

            socket.emit('announce', 'control announcement');

            socket.on('disconnect', function () {
                console.log('goodbye user');
                socket.broadcast.emit('user:left', {
                    name: name
                });
                userNames.free(name);
            });
        });


    
};